{"meta":{"title":"My Blog","subtitle":"Somewhere to write something","description":"","author":"Vapor","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2023-09-06T14:53:40.000Z","updated":"2023-09-06T14:53:40.853Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":""}],"posts":[{"title":"基于Github的Hexo博客搭建","slug":"building blog note","date":"2023-09-06T12:00:32.000Z","updated":"2023-09-11T05:32:45.344Z","comments":true,"path":"2023/09/06/building blog note/","link":"","permalink":"http://example.com/2023/09/06/building%20blog%20note/","excerpt":"本文是一篇个人博客搭建笔记。选用Hexo作为静态博客框架，通过GitHub Pages 服务来托管 Hexo 生成的静态文件，以Git 作为版本控制系统。","text":"本文是一篇个人博客搭建笔记。选用Hexo作为静态博客框架，通过GitHub Pages 服务来托管 Hexo 生成的静态文件，以Git 作为版本控制系统。 关于Hexo简介什么是Hexo？ 官网介绍：快速、简洁且高效的博客框架 Hexo是一个基于Node.js的静态网站生成器，它能够将Markdown等格式的文本内容转化成静态网页，方便快速构建博客或其他类型的静态网站。 文件架构123456789├── node_modules： #依赖包-安装插件及所需nodejs模块。├── public #最终网页信息。即存放被解析markdown、html文件。├── scaffolds #模板文件夹。即当您新建文章时，根据 scaffold生成文件。├── source #资源文件夹。即存放用户资源。| └── _posts #博客文章目录。└── themes #存放主题。Hexo根据主题生成静态页面。├── _config.yml #网站的配置信息。标题、网站名称等。├── db.json： #source解析所得到的缓存文件。├── package.json # 应用程序信息。即配置Hexo运行需要js包。 命令总览 hexo-cli：hexo命令行，作用是： 启动hexo命令进程和参数解析机制。每次我们输入hexo xxx命令后，都会通过node调用hexo-cli中的entry函数(比如，可以把’hexo init’视为’node hexo-cli/entry.js init’)，hexo init命令仅仅在安装时调用 实现hexo命令的三个初始参数：init/version/plugins 加载hexo核心模块，并初始化 hexo core：hexo核心，作用是： 实现hexo的new、generate、publish等功能 hexo plugins: 指一些能够扩展hexo的插件。插件可以按功能分成两类: 扩展hexo命令的参数，如hexo-server(安装这个插件以后才能使用hexo server命令) 扩展hexo解析文件的”能力”，如增加jade模版解析功能的hexo-render-jade插件 部署流程 hexo g：生成静态文件。将我们的数据和界面模板相结合生成静态文件的过程。Hexo（node.js程序）遍历主题文件中你的source目录（js、css、img等静态资源），建立索引，再根据索引生成由html、js、css、img建立的纯静态文件并放在public文件夹里。public就是你的博客了，而这些恰好能被gitpages识别。 hexo d：部署文件。主要是根据在_config.yml中配置的git仓库或者coding的地址，将public文件通过git方式push到上传到github或coding的指定分支，然后在根据pages服务呈现出页面。当然把public文件部署至你的服务器也是可以的。 关于Github简介 GitHub是一个在线软件源代码托管服务平台，使用Git作为版本控制软件，由开发者Chris Wanstrath、P. J. Hyett和汤姆·普雷斯顿·沃纳使用Ruby on Rails编写而成。在2018年，GitHub被微软公司收购。 在静态博客中的主要功能 代码托管：GitHub 提供了一个免费的远程代码仓库，您可以将 Hexo 博客项目的源代码存储在 GitHub 上。这样做的好处是可以随时备份博客内容，防止数据丢失，并且可以轻松地与其他人合作或共享您的博客内容。 版本控制：GitHub 使用 Git 作为版本控制系统，使您能够追踪博客内容的修改历史。这对于记录每次博客更新的详细信息以及在需要时恢复旧版本非常有用。 部署博客：您可以使用 GitHub Pages 服务来托管 Hexo 博客的生成静态文件。GitHub Pages 允许您将博客部署到基于 GitHub 的网站上，无需自己购买和管理服务器。这极大地简化了博客的部署过程。 关于Git简介Git 是一种分布式版本控制系统，用于跟踪和管理项目的源代码以及各种文件。 管理机制在博客管理中，Git 用于管理博客的源文件和相关资源，而不仅仅是生成的网页。hexo d上传部署到github的其实是hexo编译后的文件，是用来生成网页的，不包含源文件。也就是上传的是在本地目录里自动生成的.deploy_git。其他文件 ，包括我们写在source 里面的，和配置文件，主题文件，都没有上传到github。所以可以利用git的分支管理，将源文件上传到github的另一个分支即可。 Git常用命令 git init 初始化一个新的 Git 仓库。该命令在当前目录下创建一个名为 .git 的文件夹，用于存储 Git 仓库的配置和历史记录。 git clone &lt;仓库URL&gt; 克隆远程 Git 仓库到本地。通过提供仓库的 URL，将远程仓库的所有文件和历史记录复制到本地。 git add &lt;文件或目录&gt; 将文件或目录的更改添加到 Git 的暂存区。在提交前，使用该命令将要保存的更改移动到暂存区。 git commit -m &quot;提交消息&quot; 提交暂存区中的更改，并创建一个新的提交。提交消息通常用于描述此次提交的目的或内容。 git status 显示工作目录和暂存区中文件的状态。它会告诉你哪些文件已修改、哪些文件已添加到暂存区、哪些文件未跟踪等信息。 git log 显示仓库的提交历史记录。它会列出每个提交的作者、日期、提交消息以及哈希值。 git branch 显示当前仓库的所有分支。当前分支会用星号 * 标记。 git checkout &lt;分支或提交&gt; 切换到指定分支或提交。用于切换工作目录中的文件版本，可以是分支名或提交的哈希值。 git pull 从远程仓库拉取最新的更改并合并到当前分支。通常与 git fetch 一起使用，以更新本地仓库。 git push 将本地分支的更改推送到远程仓库。通常需要指定远程仓库的名称和分支名，例如 git push origin master。 操作步骤安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Windows:到git官网下载。 Linux:sudo apt-get install git 检查:git --version 安装nodejsNode.js（通常简称 Node）是一个开源的、跨平台的 JavaScript 运行时环境，它允许开发者使用 JavaScript 编写服务器端应用程序。在 Hexo 中，Node.js 的主要作用是作为 Hexo 的运行时环境。 Windows:到nodejs官网下载，选择LTS版本。 Linux:12sudo apt-get install nodejssudo apt-get install npm 检查:12node -vnpm -v 安装Hexo先创建一个文件夹blog，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 输入命令：1npm install -g hexo-cli 检查:1hexo -v 初始化123hexo init myblogcd myblog //进入这个myblog文件夹npm install 运行测试12hexo ghexo server 输入localhost:4000验证。 将Hexo部署到Github 在GitHub中创建一个和你用户名相同的仓库 XIciA.github.io。 回到你的git bash中，配置 Git 全局用户信息： 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; 检查信息:12git config user.namegit config user.email 创建ssh11ssh-keygen -t rsa -C &quot;youremail&quot; 在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key把你的id_rsa.pub里面的信息复制进去。 检查：1ssh -T git@github.com 打开站点配置文件 _config.yml，修改deploy部分为：1234deploy: type: git repo: git@github.com:XIciA/XIciA.github.io.git branch: master 安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。1npm install hexo-deployer-git --save 运行：123hexo cleanhexo generatehexo deploy 访问http://XIciA.github.io Git分支进行多终端工作 首先，先在github上新建一个hexo分支。 然后在这个仓库的settings中，选择默认分支为hexo分支。 然后在本地的任意目录下输入：1git clone git@github.com:XIciA/XIciA.github.io.git 接下来在克隆到本地的ZJUFangzh.github.io中，把除了.git 文件夹外的所有文件都删掉。把之前我们写的博客源文件全部复制过来，除了.deploy_git。这里应该说一句，复制过来的源文件应该有一个.gitignore，用来忽略一些不需要的文件，如果没有的话，自己新建一个，在里面写上如下，表示这些类型文件不需要git：1234567.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。 上传：123git add .git commit –m &quot;add branch&quot;git push 绑定域名 在阿里云上购买域名。 进入阿里云控制台找到域名管理，进入解析添加 DNS 记录： A 记录（地址记录）：将域名指向博客托管服务的 IP 地址。你需要向 A 记录中添加托管服务提供的 IP 地址。这个 IP 地址通常可以在托管服务的文档或设置中找到。 记录类型为A 主机记录为：@ 记录值为自己&lt;&gt;.git.io的ip地址。IP地址在cmd中ping一下即可,ping -4 XIciA.github.io CNAME 记录（别名记录）：如果你的博客托管服务有自定义域名设置，你可能需要添加一个 CNAME 记录，将域名指向托管服务的自定义域名。这通常在服务的文档中有详细说明。 记录类型为CNAME 主机记录为www 记录值为自己的github访问地址。 TTL 设置：TTL（生存时间）是 DNS 记录在缓存中保存的时间。你可以根据需要设置 TTL 的值。较短的 TTL 可以更快地生效域名设置变更，但也可能导致 DNS 请求增加。一般来说，你可以选择默认设置或者设置为较短的时间，然后再根据需要更改。 Hexo配置域名:在自己博客的跟目录source文件夹下创建一个名字CNAME记事本内容输入自己的个人域名，保存关闭。删除后缀.txt 仓库绑定域名：在GitHub中找到自己的博客仓库，点击setting，拉到最下面找到GitHub Pages点进去,在Custom domain输入自己的域名。 发布文章 创建草稿：首先，在 Hexo 博客项目的根目录下，使用以下命令创建一篇新的草稿文章： 1hexo new draft my-new-draft 发布草稿：发布草稿： 当你准备好将草稿发布为一篇正式文章时，使用以下命令发布它： 1hexo publish draft my-new-draft 这将移动草稿文件从 source/_drafts 目录到 source/_posts 目录，并将其日期信息更新为当前日期和时间。 生成静态网站文件：在命令行中，进入你的 Hexo 项目的根目录，然后运行以下命令来生成静态网站文件： 1hexo generate 这个命令会根据你在 Hexo 项目中的配置生成静态 HTML 文件和其他资源文件。生成的文件会存储在 Hexo 项目的 public 目录下。 预览你的修改（可选）：在生成静态文件后，你可以在本地预览你的网站，以确保修改没有问题。你可以使用以下命令启动本地服务器： 1hexo server 然后在浏览器中访问 http://localhost:4000 来查看网站。 部署你的网站：一旦你确认修改没有问题，你可以使用以下命令来将网站部署到远程服务器或托管平台： 1hexo deploy 这会自动将生成的静态文件推送到 GitHub Pages 上。如果你使用其他托管服务或者服务器，你需要相应地配置和执行部署命令。 提交你的修改到 Git 仓库：在你发布网站之后，确保将你的修改和生成的文件提交到你的 Git 仓库，以便跟踪网站的历史和与团队成员协作。你可以使用以下命令来提交： 123git add .git commit -m &quot;描述你的修改&quot;git push 客制化笔记修改前段界面的关键路径 汉化文件夹：D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\languages\\zh-CN.yml ejs文件夹：D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\layout\\common\\post css文件夹：D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\source\\css\\_partial修改sidebar-top 可在主题配置文件D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\_config.yml中的social_links进行基本的更改。这里注释掉所有相关功能，让其不再显示图标。 在D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\layout\\common\\sidebar.ejs中修改sidebar.follow为sidebar.sentence并删除&lt;/p&gt;前的冒号。 在D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\languages\\zh-CN.yml中的sidebar部分添加变量sidebar.sentence并加上自己喜欢的句子。 可以在D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\source\\css\\_partial\\sidebar.styl调整css样式。 配置文章目录 目录已经属于插件了，在hexo配置文件加入: 12plugins: ## https://hexo.io/plugins/- hexo-toc 并在Front-matter加入toc: true。 如无法跳转则可能是hexo的toc版本冲突问题，需要删除原版toc：1npm uninstall hexo-toc 文章摘要两种表示方法 方法1：用&lt;!-- more --&gt;截断正文。 方法2：在Front-matter加入excerpt:并输入内容。 插入图片采用VSCode+PicGo+AliyunOss方案搭建Markdown图床。插入图片操作步骤如下： 在Vscode设置中进行picgo插件的配置，其中在bucket的路径如下： 将图片存至剪切板，点击快捷键ctrl+alt+U可一键将图片上传至阿里云并粘贴图片url。插入公式 卸载hexo-math 在hexo目录下使用下面的命令查看你是否已经安装了hexo-math插件：1npm list hexo-math 输入以下命令将hexo-math插件卸载:1npm uninstall hexo-math --save 安装并配置hexo-filter-mathjax 输入以下命令安装hexo-filter-mathjax：1npm list hexo-filter-mathjax 检查是否安装成功：1npm list hexo-filter-mathjax 在D:\\BLOG\\branch\\XIciA.github.io\\_config.yml添加如下的代码：1234567mathjax:tags: none # or &#x27;ams&#x27; or &#x27;all&#x27;single_dollars: true # enable single dollar signs as in-line math delimiterscjk_width: 0.9 # relative CJK char widthnormal_width: 0.6 # relative normal (monospace) widthappend_css: true # add CSS to pages rendered by MathJaxevery_page: false # if true, every page will be rendered by MathJax regardless the `mathjax` setting in Front-matter 安装公式渲染器 hexo-math默认的公式渲染器是hexo-renderer-marked，它和markdown的语法有冲突，我们将其卸载，查看是否安装了hexo-renderer-marked公式渲染器：1npm list hexo-renderer-marked 如果安装了将其卸载：1npm uninstall hexo-renderer-marked --save 然后我们安装一个新的公式渲染器，叫做hexo-renderer-kramed，它对hexo-renderer-marked进行了改进，在hexo目录下输入下面的命令安装：1npm install hexo-renderer-kramed --save 检查：1npm list hexo-renderer-kramed 在D:\\BLOG\\branch\\XIciA.github.io\\node_modules\\kramed\\lib\\rules\\inline.js做如下修改：1234567//escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/,//修改为：escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,//em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,//修改为em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 在D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\_config.yml确保1mathjax: true # options: true, false 添加脚注 安装 hexo-footnotes 插件：1npm install hexo-footnotes --save 在 Hexo 项目的 _config.yml 文件中启用 hexo-footnotes 插件。确保在 plugins 部分添加了以下内容：12plugins:- hexo-footnotes 删除comment-counter小图标 就是觉得不太好看，直接删除了D:\\BLOG\\branch\\XIciA.github.io\\themes\\hueman\\layout\\comment\\counter.ejs文件里的所有内容。不过以后如果想修改记得回来看。12345678910111213141516&lt;% if (post.comments) &#123; %&gt;&lt;span class=&quot;comment-counter&quot;&gt; &lt;i class=&quot;fa fa-comments-o&quot;&gt;&lt;/i&gt; &lt;% if (theme.comment.disqus) &#123; %&gt; &lt;span class=&quot;disqus-comment-count&quot; data-disqus-identifier=&quot;&lt;%= post.disqusId || &#x27;&#x27; %&gt;&quot; data-disqus-url=&quot;&lt;%= post.permalink %&gt;&quot;&gt;0&lt;/span&gt; &lt;% &#125; else if (theme.comment.duoshuo) &#123; %&gt; &lt;span class=&quot;ds-thread-count&quot; data-thread-key=&quot;&lt;%= post.path %&gt;&quot;&gt;0&lt;/span&gt; &lt;% &#125; else if (theme.comment.isso) &#123; %&gt; &lt;span&gt;&lt;a href=&quot;&lt;%= post.permalink %&gt;#isso-thread&quot;&gt;&lt;/a&gt;&lt;/span&gt; &lt;% &#125; else if (theme.comment.facebook) &#123; %&gt; &lt;span class=&quot;fb-comments-count&quot; data-href=&quot;&lt;%= post.permalink %&gt;&quot;&gt;0&lt;/span&gt; &lt;% &#125; else if (theme.comment.changyan.on) &#123; %&gt; &lt;span class=&quot;cy_cmt_count&quot; id=&quot;sourceId::&lt;%= post.permalink %&gt;&quot;&gt;0&lt;/span&gt; &lt;% &#125; %&gt;&lt;/span&gt;&lt;% &#125; %&gt; 踩雷与排雷静态博客在线版本与源文件的Git管理 踩雷：master与branch,hexo deploy与git push,Git管理与静态页面混淆不清,导致分支上混子静态页面，试图用分支展示静态页面解决，进一步修改配置文件部署部分到hexo分支，最后运行git push和github分支页面时均报错。 排雷：Hexo 部署应该将静态博客文件部署到 master 分支或者您用于托管博客的主分支。这是博客的在线版本。另一方面，可以在 hexo 分支上管理 Hexo 博客的源文件、配置和原始内容。这个分支用于 Hexo 生成静态博客文件，但不直接用于部署。您可以使用 hexo d 或者其他 Hexo 部署命令来将生成的静态文件提交到 master 分支或其他托管博客的主分支。 消除git add产生的一种warning踩雷：windows平台进行 git add 时，控制台打印警告LF will be replaced by CRLF the next time Git touches it 排雷:这个警告是由于你的 Git 配置中设置了自动换行 (line endings) 规则，但是在你的项目中发现了与该规则不符的文件。这个警告意味着 Git 将会在下一次操作时更改这些文件的换行符。要解决这个问题，你可以在项目的根目录中创建一个名为 .gitattributes 的文件，并在其中指定换行符的规则。例如，如果你想在整个项目中使用 LF 换行符，可以添加以下内容：1* text eol=lf这将告诉 Git 对所有文本文件使用 LF 换行符。然后，提交这个 .gitattributes 文件到你的版本控制系统，以确保团队中的所有人都使用相同的换行符规则。在添加了 .gitattributes 文件后，你可能需要重新执行一次 git add . 来重新标记那些文件，然后提交它们。这样可以确保在以后的提交中使用正确的换行符规则。需要注意的是，如果你在 Windows 上使用文本编辑器，它可能会自动将文件保存为 CRLF 格式。你可以在编辑器的设置中查找选项，以确保它以 LF 格式保存文件，或者手动更改文件的换行符格式。这可以帮助减少 Git 警告的出现。 自动化脚本运行hexo g报错踩雷：自动化脚本运行hexo g报错UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0x80 in position 569: illegal multibyte sequence 排雷:subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True,encoding=&#39;utf-8&#39;)加上了最后的encoding=&#39;utf-8&#39; GBK（Guojia Biaozhun Kuozhan）和UTF-8（Unicode Transformation Format - 8-bit）都是字符编码标准，用于在计算机上表示文本字符的方式。GBK（Guojia Biaozhun Kuozhan）是一种字符编码标准，主要用于中文字符集，特别是汉字。它采用不定长编码，通常一个汉字占用2个字节，而英文字符只占用1个字节。GBK编码适用于中文环境，但无法涵盖全球字符集，因此在国际化应用中存在限制。UTF-8（Unicode Transformation Format - 8-bit）是一种通用的字符编码方式，能够表示世界上几乎所有的字符，包括各种语言的文字、符号和特殊字符。它采用不定长编码，一个字符可以占用1到4个字节，因此具有灵活性和国际化兼容性。UTF-8已成为全球互联网标准，适用于多语言和跨平台应用。 自动化脚本以下为用于简化操作的python脚本： 同步云端功能completely save:123456789101112131415161718192021222324252627282930313233import subprocessimport os# 设置 Hexo 项目的目录路径hexo_project_directory = r&quot;D:\\BLOG\\branch\\XIciA.github.io&quot;# 切换到 Hexo 项目目录os.chdir(hexo_project_directory)# 获取当前工作目录的路径current_directory = os.getcwd()print(&quot;Path:&quot;,current_directory)commit_message = input(&quot;Please enter Git submit description:&quot;)# 定义要执行的命令列表commands = [ &#x27;hexo clean&#x27;, &#x27;hexo generate&#x27;, &#x27;hexo deploy&#x27;, &#x27;git add .&#x27;, f&#x27;git commit -m &quot;&#123;commit_message&#125;&quot;&#x27;, &#x27;git push&#x27;, &#x27;git log&#x27;,]# 使用 subprocess 执行命令try: for cmd in commands: print(f&quot;Running: &#123;cmd&#125;&quot;) result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True,encoding=&#x27;utf-8&#x27;) print(f&quot;Result: &#123;result.stdout&#125;&quot;) print(&#x27;Successful Completion&#x27;)except subprocess.CalledProcessError as e: # 如果命令执行失败，打印错误信息 print(f&quot;Error running command: &#123;e&#125;&quot;) 创建草稿功能create draft： 123456789101112131415161718192021222324252627import subprocessimport os# 设置 Hexo 项目的目录路径hexo_project_directory = r&quot;D:\\BLOG\\branch\\XIciA.github.io&quot;# 切换到 Hexo 项目目录os.chdir(hexo_project_directory)# 获取当前工作目录的路径current_directory = os.getcwd()print(&quot;Woring Path:&quot;,current_directory)new_draft = input(&quot;Please enter the title of the draft:&quot;)# 定义要执行的命令列表commands = [ f&#x27;hexo new draft &quot;&#123;new_draft&#125;&quot;&#x27;,]# 使用 subprocess 执行命令try: for cmd in commands: print(f&quot;Running: &#123;cmd&#125;&quot;) result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True) print(f&quot;Result: &#123;result.stdout&#125;&quot;) print(&#x27;Successful Completion&#x27;)except subprocess.CalledProcessError as e: # 如果命令执行失败，打印错误信息 print(f&quot;Error running command: &#123;e&#125;&quot;) 提交草稿功能create draft：123456789101112131415161718192021222324252627282930313233343536import subprocessimport os# 设置 Hexo 项目的目录路径hexo_project_directory = r&quot;D:\\BLOG\\branch\\XIciA.github.io&quot;# 指定草稿路径draft_path = r&quot;D:\\BLOG\\branch\\XIciA.github.io\\source\\_drafts&quot;# 切换到 Hexo 项目目录os.chdir(hexo_project_directory)# 获取当前工作目录的路径current_directory = os.getcwd()print(&quot;Woring Path:&quot;,current_directory)# 获取目录下的文件列表file_list = os.listdir(draft_path)# 打印文件列表for filename in file_list: print(&#x27;current draft:&#x27;,filename)new_draft = input(&quot;Please enter the title of the draft:&quot;)# 定义要执行的命令列表commands = [ f&#x27;hexo publish draft &quot;&#123;new_draft&#125;&quot;&#x27;,]# 使用 subprocess 执行命令try: for cmd in commands: print(f&quot;Running: &#123;cmd&#125;&quot;) result = subprocess.run(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True, check=True) print(f&quot;Result: &#123;result.stdout&#125;&quot;) print(&#x27;Successful Completion&#x27;)except subprocess.CalledProcessError as e: # 如果命令执行失败，打印错误信息 print(f&quot;Error running command: &#123;e&#125;&quot;) 一点感受 有些真理一直都在你面前，但通过实践才能看清。学习就是不断从新事物里发现新知识和旧事物里发现新知识。 雷军：知识不全是线性的，大部分是网状的，知识点之间也不一定有绝对的先后关系，前面的内容看不懂，跳过去，并不影响学后面的；后面的学会了，有时候更容易看懂前面的。 不懂就别乱整，抱着能跑就行的心态迟早出大问题。不是说不去尝试了，就像改配置deploy部分，把静态网页部署在源码库里，结果是暂时能够生成网页，但确是十分明显的错误。站在更高的层面才能看到这是很明显的错误，所以需要从底层开始去把问题弄懂，才能达到更高的层面。 Alex:程序员看重的不仅仅是成功解决问题，代码的健壮性与可扩张性更能体现能力。 1.SSH（Secure Shell）是一种加密网络协议，用于在不安全的网络中建立安全的远程连接。SSH协议的主要目的是通过加密和身份验证来保护数据的传输和远程访问。运行这个命令后，系统会生成一个RSA密钥对，包括一个私钥（默认保存在 ~/.ssh/id_rsa）和一个公钥（默认保存在 ~/.ssh/id_rsa.pub）。私钥是私有的，必须妥善保管，而公钥可以共享给其他人或远程服务器以进行身份验证。生成SSH密钥对后，你可以将公钥添加到远程服务器上，以便通过SSH进行安全的远程访问。私钥则会用于本地SSH客户端与远程服务器进行通信时的身份验证。 ↩","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"}]},{"title":"高速三尾智能机器鱼设计","slug":"robot-fish","date":"2023-05-27T17:02:03.000Z","updated":"2023-09-11T05:32:31.096Z","comments":true,"path":"2023/05/28/robot-fish/","link":"","permalink":"http://example.com/2023/05/28/robot-fish/","excerpt":"本项目的关键技术包括3D建模技术、舵机控制技术、巡线算法设计、漏油点检测算法设计、图像处理技术、报警技术和仿真分析技术。3D建模技术可以构建出理想的原型样机。舵机控制技术是保证鱼尾能够实现动态平衡和灵活运动的关键技术。巡线算法设计采用对比度算法进行巡线，并且对管道进行提取和消除反光处理，实现了对管道的快速准确的检测和跟踪。漏油点检测算法设计采用了一种基于RGB模型的算法，可以将漏油点从背景中分离出来，并进行检测和统计。图像处理技术中的图像分割和区域处理等关键技术也为巡线算法提高了运算速度。报警技装置包括LCD显示屏、扬声器和小旗子等。仿真分析技术在实际运行和调试过程中对作品进行了进一步优化。机器鱼通过视觉模块进行巡线和漏油点检查，通过语音播报、液晶显示屏变化进行漏油点警告和统计，启动方式为WIFI远程启动，停止方式为视觉识别自动停止。","text":"本项目的关键技术包括3D建模技术、舵机控制技术、巡线算法设计、漏油点检测算法设计、图像处理技术、报警技术和仿真分析技术。3D建模技术可以构建出理想的原型样机。舵机控制技术是保证鱼尾能够实现动态平衡和灵活运动的关键技术。巡线算法设计采用对比度算法进行巡线，并且对管道进行提取和消除反光处理，实现了对管道的快速准确的检测和跟踪。漏油点检测算法设计采用了一种基于RGB模型的算法，可以将漏油点从背景中分离出来，并进行检测和统计。图像处理技术中的图像分割和区域处理等关键技术也为巡线算法提高了运算速度。报警技装置包括LCD显示屏、扬声器和小旗子等。仿真分析技术在实际运行和调试过程中对作品进行了进一步优化。机器鱼通过视觉模块进行巡线和漏油点检查，通过语音播报、液晶显示屏变化进行漏油点警告和统计，启动方式为WIFI远程启动，停止方式为视觉识别自动停止。 研究背景海洋石油污染是海洋污染中主要而复杂的污染问题之一。进入海洋环境的石油种类和途径很多,例如海洋石油勘探、开采和冶炼、海事溢油和船驳排污,以及陆源工业废物的海洋排放等,各种不同方式输入到海洋环境中油的种类各不相同,对海洋环境的危害程度和污染处理技术上的复杂程度也千差万别,因而使之成为海洋环境保护的一大难题1。因此，设计一种能够快速准确地检测漏油的机器人具有重要意义。该机器人能够检测出漏油源的位置和漏油的数量，并及时采取措施，以减少漏油对环境和人类的影响。 设计方案硬件结构仿生机器鱼通常参照鱼类游动的推进机理，利用机械、电子元器件或智能材料来实现水下推进的运动装置2。本研究的三尾鱼硬件结构包括五个部分：控制装置、视觉装置、动力装置、报警装置和供电装置。树莓派4B是控制装置的核心，完成处理摄像头采集的数据，检测漏油点，控制舵机和发出警报等任务。视觉装置由摄像头负责巡线和检测漏油点等任务。动力装置由三个舵机和橡胶仿生鱼尾组成，通过控制舵机旋转来控制鱼尾的运动。报警装置由LCD显示屏、扬声器和小旗组成，用于显示漏油点数量，发出声音警报和视觉提示。供电装置采用锂电池，并加入稳压器和低压报警器保证电路板正常工作。3D模型概念图如图1所示，实物图如图2所示。 模型与算法多进程本研究使用了 Python 的 multiprocessing 模块，实现了多进程通信。具体来说，本研究创建write_process和read_process两个进程，分别执行 action_1 和 action_2 函数。这两个函数通过一个 对象进行通信，其中 action_1 函数不断地读取摄像头数据，处理后实现漏油点警告并输出运动信息t，并将结果t存储在 中，而action_2 函数则从 中读取数据t并执行相关运动程序。通过多进程的方式，可以让action_1 和action_2 函数并行地执行，提高了程序的效率和可靠性。同时，由于两个进程之间通过 进行通信，实现了数据的共享，使得程序的实现更加灵活和可扩展。实现原理如图3所示。 音频报警算法本研究通过音频播报的方式来进行漏油点的警告，当检测到漏油点时，触发audio(p)函数运行.wav文件。函数audio(p)是播放音频文件。它有一个参数 ，表示音频文件的文件名（不包括文件扩展名），例如，如果要播放名为 music.wav 的音频文件，那么 的值应该是 music。在函数体内，首先使用 pathlib 库中的 Path 函数生成音频文件的路径，这里使用了 f-string 格式化字符串语法，将参数 插入到字符串中生成完整路径，例如 music.wav。然后，使用 OMXPlayer 播放器来播放音频文件。OMXPlayer 是一个基于 OpenMAX IL 接口的命令行媒体播放器，可以在树莓派上播放音频和视频文件。在这里，使用 OMXPlayer 的构造函数来创建一个 player 对象，并将音频文件路径作为参数传递给它。最后，调用 player 对象的 Stop() 方法来停止播放器。这个方法会停止当前正在播放的音频文件，并释放相关资源。 视频显示算法本研究采用LCD显示屏统计漏油点个数，当检测到漏油点时，触发screen(p)刷新屏内容，达到实时展示已经被检测到的漏油点个数的效果。函数screen(p)用于在树莓派上连接的ST7789显示器上显示图像和文本。首先，代码使用Python标准库logging设置日志记录级别。然后，使用Pillow库中的ImageFont模块加载字体文件，并将其用于绘制文本。接着，使用try-except结构，在可能出现的错误情况下，代码将执行相应的异常处理。在try语句块中，调用名为ST7789的类，并使用Init()方法初始化显示器，使用clear()方法清除屏幕上的任何内容。接下来，代码创建一个图像对象，并将其填充为白色。然后，代码打开一张名为p.img将其粘贴到图像对象的左上角。接着，代码创建一个ImageDraw对象，并使用text()方法将文本插入到图像对象中。最后，代码使用rotate()方法将图像翻转180度，并使用ShowImage()方法将其显示在显示器上。如果用户按下Ctrl-C键，则将记录一条日志信息，然后退出程序。 巡线功能算法本研究对比度算法进行巡线，首先提取图片四个角落的像素点作为基准点确定水面参考色域，然后根据管道与参考色域的对比度提取管道，在对管道进行精准定位后算出管道质心，最后通过质心所在的位置判定运动信息。最终处理效果如下图4所示。 确定水面参考色域首先选取特定行列进行色域分析，转换为HSV色域。选择四角的四个参考点，转换为HSV并计算与蓝色参考色域的差值。遍历参考点数组，更新差值更小的点为当前参考点，选择与参考色域最接近的点作为最终参考色域$[H_{0}, S_{0}, V_{0}]$。 提取管道位置首先提取像素点在 HSV 色域中的 S 值，计算其与参考点的差值。用 inRange 函数，将中 S 值小于参考点80的像素点设为0，再将 中 S 值小于30的像素点设为0。最后对 和 进行逐像素乘法，得到去除蓝色和反光的结果，成功提取管道。 \\begin{cases} m_1 = \\begin{cases} 1, & 80 \\leq S_{i,j} - S_0 \\leq 255 \\\\ 0, & 0 \\leq S_{i,j} - S_0 < 80 \\end{cases} \\\\ m_2 = \\begin{cases} 1, & 30 \\leq S_{i,j} \\leq 255 \\\\ 0, & 0 \\leq S_{i,j} - S_0 < 30 \\end{cases} \\\\ m = \\sum_{i,j} (m_{1_{i,j}} \\cdot m_{2_{i,j}}) \\end{cases} 计算管道质心首先确定目标检测行，再计算每行目标像素数量。将每一行的质心横坐标的质心横坐标的平均值，并将对应的 Y 中的值求平均。则目标的质心坐标为$(pos_x,pos_y)$: \\begin{cases} pos_x = \\frac{1}{k} \\sum_{i=1}^{k} \\frac{1}{n} \\sum_{j=1}^{n} x_j \\\\ pos_y = \\frac{1}{k} \\sum_{i=1}^{k} Y_i \\end{cases} 判定运动信息本研究采用极坐标系来判断运动信息。首先，以图像中心$(x_0,y_0 )$为原点，建立极坐标系。已知质心坐标为 $(pos_x,pos_y)$，则其极坐标为 $(ρ,θ)$，其中: \\begin{cases} pos_x = \\frac{1}{k} \\sum_{i=1}^{k} \\frac{1}{n} \\sum_{j=1}^{n} x_j \\\\ pos_y = \\frac{1}{k} \\sum_{i=1}^{k} Y_i \\end{cases}运动信息与极坐标(ρ,θ)的对应关系如下图5所示。 漏油点检测功能算法本研究使用BGR阈值限制，判断像素是否为漏油点。使用inRange函数得到二值图像n1和n2，元素级别与运算得到像素总数n。通过滑动窗口计算最近10个检测到的漏油点像素总数，若大于等于40，触发声音报警和屏幕报警。 \\begin{cases} n_1 = \\begin{cases} 1, & 0 \\leq B_{i,j} - G_{i,j} \\leq 20 \\\\ 0, & B_{i,j} - G_{i,j} > 20 \\end{cases} \\\\ n_2 = \\begin{cases} 1, & 0 \\leq B_{i,j} - G_{i,j} \\leq 20 \\\\ 0, & B_{i,j} - G_{i,j} > 20 \\end{cases} \\\\ n = \\sum_{i,j} (n_{1_{i,j}} \\cdot n_{2_{i,j}}) \\end{cases}运动控制算法本研究使用了脉冲宽度调制PWM技术，舵机的控制信号占空比范围为[2.5%,12.5%]，占空比ε的变化与舵机的单边转动角度φ线性关系如下所示。 \\epsilon = \\frac{45 + \\phi}{18}尾鳍摆动幅值和频率是影响尾鳍推进仿生机器鱼游动速度的重要因素3。本研究通过中立位置占空比w和单边转动角度φ来决定占空比ε的大小。在相同的运动学参数下，振幅不变的鱼鳍波动模式产生更大的推进力，具有更高的游动稳定性4。如图6所示。 运动模型及性能分析 建立运动模型 关于鱼类运动的流体力学原理的研究，有助于实现高效推进下如何保持高机动性，稳定性等问题5。基于牛顿第二定律，通过对三尾鱼运动时的受力进行分析，可建立三尾鱼的运动模型如下所示， \\begin{cases} (F_6 + F_5D + F_4)\\cos\\theta - (F_1 + F_2D + F_3)\\sin\\theta + F_7 = m\\cdot a_x \\\\ (F_1 + F_2D + F_3)\\cos\\theta - (F_6 + F_5D + F_4)\\sin\\theta + F_7 = m\\cdot a_y \\\\ M_1 + M_2 + M_3 + M_4 + M_5 + M_6 + M_7 = m\\cdot J \\end{cases} 结果分析通过四阶龙格库塔法对微分方程组进行求解，可得三尾鱼不同运动状态下的运动轨迹与运动速度，如图8、图9所示，可知三尾鱼具有较高的机动性能。可得三尾鱼船头运动速度和运动角速度峰值分别约为$1 \\times 10^{-3}$ rad和$1 \\times 10^{-2}$ rad/s，如图10、图11所示，表明三尾鱼具有较强的横侧稳定性，且前端摄像头不易被干扰。 创新特色 本作品采用3D建模技术设计出理想的原型样机，并结合实际制造出机器鱼原型，实现了从虚拟到实际的转化，提高了制作效率和准确性。 动力装置采用三个舵机及其仿生鱼尾，并且通过两侧舵机非镜像运行修正了由于中间鱼尾产生的偏流现象，相比传统单尾机器鱼，三个动力装置同时运行可产生更大和更稳定的动力，提高了机器鱼的横侧稳定性和速度。 巡线算法采用对比度算法提取管道并除去反光而不是传统的HSV模型，该算法中的颜色参考点随着环境的变化而变化，可以有效地解决管道颜色和环境光线变化带来的干扰，并且有效除去水面反光等干扰因素，提高了管道跟踪的准确率与便捷性。 本作品选取特定的关键行列进行图像处理，而不是遍历图片中所有像素点，加快了程序运算速度，提高了机器鱼的实时性和修正性能。 本作品通过仿真分析技术，使用四阶龙格库塔法求解微分方程组，将数据可视化并进一步优化，提高了作品的设计和优化效率。 应用前景本作品具有广阔的推广前景。首先，在海洋漏油事故中，机器鱼的使用可以大大缩短响应时间，提高漏油点的定位和检测准确率，减少漏油造成的环境和经济损失。其次，该机器鱼可以应用于其他需要在水下环境进行检测和探索的领域，如水下管道维修、水下资源勘探等领域。最后，该机器鱼还可以应用于水下科学探索和教育领域，为学生和科研人员提供一个更加直观的水下观测和实验平台。因此，本作品的推广前景非常广阔，具有重要的社会和经济价值。 1.Dhavalikar Anagha S., Choudhari Pranali C.. Detection and Quantification of Daily Marine Oil Pollution Using Remote Sensing[J]. Water, Air, &amp; Soil Pollution, 2022, 233(8). ↩2.Tian Qunhong, Wang Tao, Wang Yunxia, Wang Zhiwei, Liu Cuiwei. A two-level optimization algorithm for path planning of bionic robotic fish in the three-dimensional environment with ocean currents and moving obstacles[J]. Ocean Engineering, 2022, 266(P3). ↩3.葛立明, 李宗刚. 尾鳍推进仿生机器鱼速度优化[J]. 兰州交通大学学报, 2016, 35(3): 18-23. ↩4.章永华, 何建慧. 仿生鱼鳍波动推进模式对游动性能影响的数值研究[J]. 机械科学与技术, 2013, 32(3): 435-440. ↩5.夏全新, 鲁传敬, 吴磊. 鱼类波状摆动推进的数值模拟[J]. 水动力学研究与进展：A辑, 2005(z1): 921-928. ↩","categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"智能设计","slug":"智能设计","permalink":"http://example.com/tags/%E6%99%BA%E8%83%BD%E8%AE%BE%E8%AE%A1/"}]},{"title":"机器车巡线与人群识别系统设计","slug":"robot-car","date":"2022-11-22T07:40:00.000Z","updated":"2023-09-11T07:08:30.719Z","comments":true,"path":"2022/11/22/robot-car/","link":"","permalink":"http://example.com/2022/11/22/robot-car/","excerpt":"本项目完成了机器车在复杂环境的巡线以及人群识别功能。软件平台采用基于 Ubuntu16.04 的 Kinectic 版的机器人操作系统 ROS。巡线技术主要采用 HSV 划线遍历法，识别路线采用限制 HSV 通道阈值进行筛选，识别人群采用 paddlepaddle 算法库中yolov3_darknet53_pedestrian 模型进行人群定位，进而使用 HSV 模型进行颜色判别。","text":"本项目完成了机器车在复杂环境的巡线以及人群识别功能。软件平台采用基于 Ubuntu16.04 的 Kinectic 版的机器人操作系统 ROS。巡线技术主要采用 HSV 划线遍历法，识别路线采用限制 HSV 通道阈值进行筛选，识别人群采用 paddlepaddle 算法库中yolov3_darknet53_pedestrian 模型进行人群定位，进而使用 HSV 模型进行颜色判别。 问题描述机器车需要从起点位置出发，机沿途依次通过上下斜坡、单边桥、S弯道、直角弯道、U 形弯道、双边桥等地形，并在弯道区域完成人群识别任务，最终到达终点，并在终端区输出人群总数、红色系上衣人数、蓝色系上衣人数。 设计方案技术基础 HSV模型：HSV（Hue, Saturation, Value）是由A. R. Smith于1978年创建的一种颜色空间，也称为六角锥体模型（Hexcone Model）。在HSV模型中，颜色由色度（Hue）、饱和度（Saturation）、明度（Value）组成。 在使用HSV时，可以使用OpenCV中的cv2.COLOR_RGB2HSV将RGB模型图像转换成HSV模型图像。转换原理如下： 假设$(r, g, b)$分别是一个颜色的红、绿和蓝坐标，它们的值是在0到1之间的实数，$max$等于$r, g, b$中的最大值，$min$等于$r, g, b$中的最小值。 色度（Hue）计算如下： h = \\begin{cases} 0^\\circ & \\text{if } \\max = \\min \\\\ 60^\\circ \\times \\frac{g-b}{\\max -\\min }+0^\\circ, & \\text{if } \\max =r \\text{ and } g \\geq b \\\\ 60^\\circ \\times \\frac{g-b}{\\max -\\min }+360^\\circ, & \\text{if } \\max =r \\text{ and } g","categories":[{"name":"科技","slug":"科技","permalink":"http://example.com/categories/%E7%A7%91%E6%8A%80/"}],"tags":[{"name":"智能设计","slug":"智能设计","permalink":"http://example.com/tags/%E6%99%BA%E8%83%BD%E8%AE%BE%E8%AE%A1/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://example.com/categories/%E6%8A%80%E6%9C%AF/"},{"name":"科技","slug":"科技","permalink":"http://example.com/categories/%E7%A7%91%E6%8A%80/"}],"tags":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://example.com/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"},{"name":"智能设计","slug":"智能设计","permalink":"http://example.com/tags/%E6%99%BA%E8%83%BD%E8%AE%BE%E8%AE%A1/"}]}